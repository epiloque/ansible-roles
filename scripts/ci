#!/usr/bin/env bash
# @description continuous integration pipeline entrypoint
# @import console/die
# @import console/error
# @import console/info
# @import console/warn
# @import path/relativePath 
# @import github.com/escapace/stack-tools docker/dockerBuild

declare -A CI_RESULTS

testRole () {
    local directory="$1"
    local name
    local code=0
    local role

    name="$(basename "${1}")"

    cd "${directory}" || _ die "${directory} does not exist"

    # mkdir -p "${directory}/tests/roles"

    cd "${directory}/tests/roles" || _ die "${directory}/tests/roles does not exist"

    while read -d '' -r role
    do
        if [[ "$(basename ${role})" != "${name}" ]]
        then
             
            ln -f -s "$(_ relativePath "${role}" "$(pwd)")" "$(basename ${role})"
        fi
    done < <(find "${MANAGE_REPOSITORY}/roles" -type d -mindepth 1 -maxdepth 1 -print0 2> /dev/null)

    cd "${directory}" || _ die "${directory} does not exist"

    # ansible-galaxy install --force -r tests/requirements.yml -p tests/roles/ >& /dev/null || {
    #     _ warn "${name}: failed to install reqirements"
    #     code=1
    # }

    ansible-playbook -i tests/inventory tests/test.yml --syntax-check

    ansible-playbook -i tests/inventory tests/test.yml || {
        code=1
    }

    if [[ -f "${directory}/tests/teardown.yml" ]]
    then
        ansible-playbook -i tests/inventory tests/teardown.yml >& /dev/null || {
            _ warn "${name}: teardown failed"
        }
    fi

    CI_RESULTS["${name}"]="${code}"
}

main ()
{
    verbose true
    strict true

    local code=0
    local directory="${MANAGE_REPOSITORY}/roles"

    local queue=($@)

    if _ required "${TEST_SUITE}"
    then
        queue=(${TEST_SUITE})
    fi

    [[ -d "${directory}" ]] || _ die "${directory} does not exist"

    if _ required "${queue[@]}"
    then
        for arg in "${queue[@]}"
        do
            if [[ ! -d "${directory}/${arg}" ]]
            then
                _ die "${directory}/${arg} does not exist"
            fi
        done

        for arg in "${queue[@]}"
        do
            testRole "${directory}/${arg}"
        done
    else
        for roleDir in ${directory}/*
        do
            if [[ -d "${roleDir}" ]]
            then
                testRole "${roleDir}"
            fi
        done
    fi

    for name in "${!CI_RESULTS[@]}"
    do
        local value=${CI_RESULTS[${name}]}

        if (( "${value}" == 0 ))
        then
            _ info "'${name}' passed"
        else
            _ error "'${name}' failed"
            ((code++))
        fi
    done

    exit "${code}"
}
